AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lambda to stop or terminate all instances.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Parameters:
  Schedule:
    Description: >
      Schedule to execute the lambda, can be a rate or a cron schedule. Format at
      https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
    Type: String
    Default: cron(0 2 * * ? *)  # Run at 2am UTC (8pm PST) every night
  Ec2Action:
    Type: String
    Description: "Action to take on running instances"
    Default: "STOP"
    AllowedValues:
      - "STOP"
      - "TERMINATE"

Resources:
  TerminatorFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: .
      Handler: ec2_terminator/app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          EC2_ACTION: !Ref Ec2Action
      Events:
        Nightly:
          Type: Schedule # More info about Schedule Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
          Properties:
            Schedule: !Ref Schedule

  FunctionPolicy:   # policy to allow scanning and stopping/terminating instances
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ManageInstances
            Effect: Allow
            Resource: "*"
            Action:
              - ec2:Describe*
              - ec2:StopInstances
              - ec2:TerminateInstances


  FunctionRole:   # execute lambda function with this role
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref FunctionPolicy

Outputs:
  TerminatorFunctionArn:
    Description: "Lambda Function ARN"
    Value: !GetAtt TerminatorFunction.Arn
  TerminatorFunctionRoleArn:
    Description: "Implicit IAM Role created for function"
    Value: !GetAtt FunctionRole.Arn
